image: docker:20.10.16

services:
  - docker:20.10.16-dind

variables:
  DOCKER_TLS_CERTDIR: "/certs"
  IMAGE_NAME: promanage-frontend
  # Utilisation de buildkit pour des builds plus rapides
  DOCKER_BUILDKIT: 1
  # Configuration du cache pour optimiser les builds
  DOCKER_DRIVER: overlay2

# Cache global pour les dépendances npm
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/

stages:
  - test
  - build
  - push
  - cleanup

# Job pour vérifier la qualité du code
lint:
  stage: test
  image: node:18-alpine
  script:
    - npm ci
    - npm run lint
  only:
    - main
    - develop
    - merge_requests

# Job pour les tests unitaires
test:
  stage: test
  image: node:18-alpine
  script:
    - npm ci
    - npm run test
  only:
    - main
    - develop
    - merge_requests

# Job pour construire l'image
build:
  stage: build
  before_script:
    - docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_TOKEN
  script:
    - |
      if [[ "$CI_COMMIT_BRANCH" == "main" ]]; then
        export VERSION=latest
      else
        export VERSION=$CI_COMMIT_REF_SLUG
      fi
    - docker build --pull --cache-from $DOCKERHUB_USERNAME/$IMAGE_NAME:latest -t $DOCKERHUB_USERNAME/$IMAGE_NAME:$CI_COMMIT_SHA -t $DOCKERHUB_USERNAME/$IMAGE_NAME:$VERSION .
  only:
    - main
    - develop

# Job pour pousser l'image
push:
  stage: push
  before_script:
    - docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_TOKEN
  script:
    - |
      if [[ "$CI_COMMIT_BRANCH" == "main" ]]; then
        docker push $DOCKERHUB_USERNAME/$IMAGE_NAME:latest
      fi
    - docker push $DOCKERHUB_USERNAME/$IMAGE_NAME:$CI_COMMIT_SHA
    - docker push $DOCKERHUB_USERNAME/$IMAGE_NAME:$CI_COMMIT_REF_SLUG
  only:
    - main
    - develop

# Nettoyage des images locales
cleanup:
  stage: cleanup
  script:
    - docker image prune -f
  when: always
