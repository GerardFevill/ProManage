name: ProManage CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      # Configuration Node.js pour le backend et le frontend
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      # ===== BACKEND =====
      - name: Install backend dependencies
        run: |
          cd back-end
          npm install --legacy-peer-deps
      
      - name: Build backend
        run: |
          cd back-end
          npm run build
      
      # ===== FRONTEND =====
      - name: Install frontend dependencies
        run: |
          cd front-end
          npm install --legacy-peer-deps
      
      - name: Build frontend
        run: |
          cd front-end
          npm run build -- --configuration=production --aot --build-optimizer --progress=false
      
      # ===== DOCKER =====
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        if: github.event_name != 'pull_request'
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      # Construction et push de l'image backend
      - name: Build and push backend Docker image
        uses: docker/build-push-action@v4
        if: github.event_name != 'pull_request'
        with:
          context: ./back-end
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/promanage-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      # Construction et push de l'image frontend
      - name: Build and push frontend Docker image
        uses: docker/build-push-action@v4
        if: github.event_name != 'pull_request'
        with:
          context: ./front-end
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/promanage-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      # ===== DÉPLOIEMENT =====
      - name: Update docker-compose.yml with latest images
        if: github.event_name != 'pull_request'
        run: |
          sed -i "s|image: .*promanage-backend:.*|image: ${{ secrets.DOCKERHUB_USERNAME }}/promanage-backend:latest|g" docker-compose.yml
          sed -i "s|image: .*promanage-frontend:.*|image: ${{ secrets.DOCKERHUB_USERNAME }}/promanage-frontend:latest|g" docker-compose.yml
      
      # Déploiement sur un serveur (commenté par défaut)
      # Décommentez et configurez les secrets pour activer le déploiement
      # - name: Deploy to production server
      #   if: github.event_name != 'pull_request'
      #   uses: appleboy/ssh-action@master
      #   with:
      #     host: ${{ secrets.DEPLOY_HOST }}
      #     username: ${{ secrets.DEPLOY_USER }}
      #     key: ${{ secrets.DEPLOY_KEY }}
      #     script: |
      #       cd /opt/promanage
      #       wget -O docker-compose.yml ${{ secrets.REPO_RAW_URL }}/docker-compose.yml
      #       docker-compose pull
      #       docker-compose up -d
