version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: promanage_db
    environment:
      POSTGRES_DB: promanage_db
      POSTGRES_USER: promanage_user
      POSTGRES_PASSWORD: promanage_password
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U promanage_user -d promanage_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - promanage_network

  backend:
    image: ${DOCKERHUB_USERNAME:-gerardfevill}/promanage-backend:latest
    container_name: promanage_backend
    build:
      context: ./back-end
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgres://promanage_user:promanage_password@postgres:5432/promanage_db
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - promanage_network

  frontend:
    image: ${DOCKERHUB_USERNAME:-gerardfevill}/promanage-frontend:latest
    container_name: promanage_frontend
    build:
      context: ./front-end
      dockerfile: Dockerfile
    ports:
      - "80:80"
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - promanage_network

volumes:
  postgres_data:
    name: promanage_postgres_data

networks:
  promanage_network:
    name: promanage_network
